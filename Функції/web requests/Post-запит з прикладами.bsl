// Простий POST-запрос с JSON
Параметры = ПараметрыПостЗапроса();
Параметры.Адрес = "https://api.example.com/users";

// Дані для відправки
Параметры.Данные.Вставить("name", "Іван");
Параметры.Данные.Вставить("email", "ivan@example.com");
Параметры.Данные.Вставить("age", 30);

Результат = ВыполнитьПостЗапрос(Параметры);

Если Результат.Успех Тогда
	
	Сообщить("Успешно! Код: " + Результат.КодСостояния);
	Сообщить("Ответ (строка): " + Результат.Тело);
	
	// JSON вже розпарсений
	Если Результат.Свойство("ТелоJSON") И Результат.ТелоJSON <> Неопределено Тогда
		
		Сообщить("ID созданного пользователя: " + Результат.ТелоJSON.id);
		
	КонецЕсли;
	
Иначе
	
	Сообщить("Ошибка: " + Результат.ОписаниеОшибки);
	Сообщить("Тело ответа: " + Результат.Тело);
	
КонецЕсли;

//***************************************************************************************************************************
1c// POST с вложенными структурами
Параметры = ПараметрыПостЗапроса();
Параметры.Адрес = "https://api.example.com/orders";

Параметры.Данные.Вставить("order_id", "ORD-123");
Параметры.Данные.Вставить("amount", 1500.50);

МассивТоваров = Новый Массив;

Товар1 = Новый Структура;
Товар1.Вставить("name", "Ноутбук");
Товар1.Вставить("quantity", 1);
Товар1.Вставить("price", 25000);
МассивТоваров.Добавить(Товар1);

Товар2 = Новый Структура;
Товар2.Вставить("name", "Мышка");
Товар2.Вставить("quantity", 2);
Товар2.Вставить("price", 150);
МассивТоваров.Добавить(Товар2);

Параметры.Данные.Вставить("items", МассивТоваров);

Результат = ВыполнитьПостЗапрос(Параметры);

//***************************************************************************************************************************
// POST с аутентификацией и дополнительными заголовками
Параметры = ПараметрыПостЗапроса();
Параметры.Адрес = "https://api.example.com/secure/data";
Параметры.Логин = "user";
Параметры.Пароль = "password";
Параметры.ДополнительныеЗаголовки.Вставить("X-Custom-Header", "значение");

Параметры.Данные.Вставить("action", "create");
Параметры.Данные.Вставить("data", "тестові дані");

Результат = ВыполнитьПостЗапрос(Параметры);






//***************************************************************************************************************************
// <function_purpose>Назначение: Создание структуры параметров для выполнения POST-запроса с JSON</function_purpose>
// <returns>Возвращаемое: Структура – Структура с параметрами запроса</returns>
// <notes>Примечания: Данные - структура для преобразования в JSON. Кодировка по умолчанию CESU8. Content-Length рассчитывается автоматически</notes>
Функция ПараметрыПостЗапроса() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Данные", Новый Структура);
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("Таймаут", 30);
	Параметры.Вставить("ДополнительныеЗаголовки", Новый Соответствие);
	Параметры.Вставить("Кодировка", "CESU-8");
	
	Возврат Параметры;
	
КонецФункции

// <function_purpose>Назначение: Выполнение POST-запроса с JSON-данными к веб-сервису</function_purpose>
// <parameters>Параметры: ПараметрыФункции – Структура – Параметры запроса (Адрес, Данные, Логин, Пароль, Таймаут, ДополнительныеЗаголовки, Кодировка)</parameters>
// <returns>Возвращаемое: Структура – Структура с результатом запроса (Успех, КодСостояния, Тело, ТелоJSON, Заголовки, ОписаниеОшибки)</returns>
// <notes>Примечания: Данные автоматически преобразуются в JSON. Content-Type и Content-Length устанавливаются автоматически. Ответ парсится как JSON в поле ТелоJSON</notes>
Функция ВыполнитьПостЗапрос(ПараметрыФункции) Экспорт
	
	Если НЕ ПараметрыФункции.Свойство("Адрес") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыФункции.Адрес) Тогда
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Не указан адрес запроса");
	КонецЕсли;
	
	Если НЕ ПараметрыФункции.Свойство("Данные") Тогда
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Не указаны данные для отправки");
	КонецЕсли;
	
	Попытка
		
		СтруктураАдреса = СтруктураURI(ПараметрыФункции.Адрес);
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка разбора адреса: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	Сервер = СтруктураАдреса.Хост;
	Порт = ?(ЗначениеЗаполнено(СтруктураАдреса.Порт), СтруктураАдреса.Порт, 
	         ?(НРег(СтруктураАдреса.Схема) = "https", 443, 80));
	
	ИспользоватьSSL = НРег(СтруктураАдреса.Схема) = "https";
	
	ПутьНаСервере = СтруктураАдреса.ПутьНаСервере;
	Если НЕ ЗначениеЗаполнено(ПутьНаСервере) Тогда
		ПутьНаСервере = "/";
	КонецЕсли;
	
	Таймаут = ?(ПараметрыФункции.Свойство("Таймаут"), ПараметрыФункции.Таймаут, 30);
	
	ИмяКодировки = ?(ПараметрыФункции.Свойство("Кодировка"), ПараметрыФункции.Кодировка, "CESU-8");
	
	Попытка
		
		Кодировка = КодировкаТекста[СтрЗаменить(ИмяКодировки, "-", "")];
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Неизвестная кодировка: " + ИмяКодировки);
		
	КонецПопытки;
	
	JSONСтрока = СформироватьУниверсальныйJSON(ПараметрыФункции.Данные);
	
	Если НЕ ЗначениеЗаполнено(JSONСтрока) Тогда
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка преобразования данных в JSON");
	КонецЕсли;
	
	ДвоичныеДанныеТела = ПолучитьДвоичныеДанныеИзСтроки(JSONСтрока, Кодировка);
	РазмерТела = ДвоичныеДанныеТела.Размер();
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			Сервер,
			Порт,
			ПараметрыФункции.Логин,
			ПараметрыФункции.Пароль,
			,
			Таймаут,
			?(ИспользоватьSSL, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)
		);
		
		Запрос = Новый HTTPЗапрос(ПутьНаСервере);
		
		Запрос.Заголовки.Вставить("Content-Type", "application/json; charset=" + ИмяКодировки);
		Запрос.Заголовки.Вставить("Content-Length", Формат(РазмерТела, "ЧГ=0"));
		
		Если ПараметрыФункции.Свойство("ДополнительныеЗаголовки") Тогда
			
			Для Каждого Заголовок Из ПараметрыФункции.ДополнительныеЗаголовки Цикл
				Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеТела);
		
		Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
		
		КодСостояния = Ответ.КодСостояния;
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку(Кодировка);
		ЗаголовкиОтвета = Ответ.Заголовки;
		
		Успех = (КодСостояния >= 200) И (КодСостояния <= 299);
		
		ОписаниеОшибки = "";
		Если НЕ Успех Тогда
			ОписаниеОшибки = "HTTP " + КодСостояния;
		КонецЕсли;
		
		РезультатЗапроса = СоздатьРезультатЗапроса(Успех, КодСостояния, ТелоОтвета, ЗаголовкиОтвета, ОписаниеОшибки);
		
		Если Успех Тогда
			
			ТелоJSON = ПрочитатьУниверсальныйJSON(ТелоОтвета);
			
			Если ТелоJSON <> Неопределено Тогда
				РезультатЗапроса.Вставить("ТелоJSON", ТелоJSON);
			Иначе
				РезультатЗапроса.Вставить("ТелоJSON", Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат РезультатЗапроса;
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка выполнения запроса: " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

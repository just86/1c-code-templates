// <function_purpose>Назначение: Универсальное чтение JSON и преобразование в типы 1С</function_purpose>
// <parameters>Параметры: СтрокаJSON – Строка – JSON-строка для разбора; ВозвращатьСоответствие – Булево – Возвращать Соответствие вместо Структуры для объектов (по умолчанию Ложь); ПреобразовыватьВТаблицуЗначений – Булево – Преобразовывать массив однородных объектов в ТаблицуЗначений (по умолчанию Ложь)</parameters>
// <returns>Возвращаемое: Произвольный – Структура, Массив, ТаблицаЗначений или примитивный тип, или Неопределено в случае ошибки</returns>
// <notes>Примечания: Автоматически распознает даты в ISO формате, преобразует null в Неопределено, строковые UUID в УникальныйИдентификатор. Поддерживает вложенные структуры. Структуры пропускаются при создании колонок таблицы</notes>
Функция ПрочитатьУниверсальныйJSON(СтрокаJSON, ВозвращатьСоответствие = Ложь, 
	ПреобразовыватьВТаблицуЗначений = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		
		Результат = ПрочитатьJSON(ЧтениеJSON, ВозвращатьСоответствие);
		ЧтениеJSON.Закрыть();
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	ПодготовленныйРезультат = ПостобработкаПослеЧтенияJSON(Результат);
	
	Если ПреобразовыватьВТаблицуЗначений И ТипЗнч(ПодготовленныйРезультат) = Тип("Массив") Тогда
		
		ТаблицаЗначений = ПреобразоватьМассивВТаблицуЗначений(ПодготовленныйРезультат);
		
		Если ТаблицаЗначений <> Неопределено Тогда
			Возврат ТаблицаЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодготовленныйРезультат;
	
КонецФункции

// <function_purpose>Назначение: Постобработка данных после чтения JSON для корректного преобразования типов</function_purpose>
// <parameters>Параметры: Данные – Произвольный – Данные после чтения JSON</parameters>
// <returns>Возвращаемое: Произвольный – Обработанные данные с преобразованными типами</returns>
// <notes>Примечания: Распознает и преобразует строковые UUID в УникальныйИдентификатор, даты в ISO формате в Дата, рекурсивно обрабатывает вложенные структуры и массивы</notes>
Функция ПостобработкаПослеЧтенияJSON(Данные)
	
	ТипДанных = ТипЗнч(Данные);
	
	Если ТипДанных = Тип("Структура") ИЛИ ТипДанных = Тип("Соответствие") Тогда
		
		Результат = ?(ТипДанных = Тип("Структура"), Новый Структура, Новый Соответствие);
		
		Для Каждого Элемент Из Данные Цикл
			
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			ОбработанноеЗначение = ПостобработкаПослеЧтенияJSON(Значение);
			
			Если ТипДанных = Тип("Структура") Тогда
				Результат.Вставить(Ключ, ОбработанноеЗначение);
			Иначе
				Результат.Вставить(Ключ, ОбработанноеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипДанных = Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Элемент Из Данные Цикл
			
			ОбработанноеЗначение = ПостобработкаПослеЧтенияJSON(Элемент);
			Результат.Добавить(ОбработанноеЗначение);
			
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		
		УИД = РаспознатьУИД(Данные);
		
		Если УИД <> Неопределено Тогда
			Возврат УИД;
		КонецЕсли;
		
		Дата = РаспознатьДатуISO(Данные);
		
		Если Дата <> Неопределено Тогда
			Возврат Дата;
		КонецЕсли;
		
		Возврат Данные;
		
	Иначе
		
		Возврат Данные;
		
	КонецЕсли;
	
КонецФункции

// <function_purpose>Назначение: Распознавание и преобразование строки УИД в УникальныйИдентификатор</function_purpose>
// <parameters>Параметры: СтрокаУИД – Строка – Строка для проверки</parameters>
// <returns>Возвращаемое: УникальныйИдентификатор – УИД или Неопределено, если строка не является УИД</returns>
// <notes>Примечания: Проверяет формат УИД (8-4-4-4-12 символов)</notes>
Функция РаспознатьУИД(СтрокаУИД)
	
	Если СтрДлина(СтрокаУИД) <> 36 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Сред(СтрокаУИД, 9, 1) <> "-" 
		ИЛИ Сред(СтрокаУИД, 14, 1) <> "-"
		ИЛИ Сред(СтрокаУИД, 19, 1) <> "-"
		ИЛИ Сред(СтрокаУИД, 24, 1) <> "-" Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДопустимыеСимволы = "0123456789abcdefABCDEF-";
	
	Для Позиция = 1 По 36 Цикл
		
		Символ = Сред(СтрокаУИД, Позиция, 1);
		
		Если Найти(ДопустимыеСимволы, Символ) = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		УИД = Новый УникальныйИдентификатор(СтрокаУИД);
		Возврат УИД;
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// <function_purpose>Назначение: Распознавание и преобразование строки даты в ISO формате в тип Дата</function_purpose>
// <parameters>Параметры: СтрокаДаты – Строка – Строка для проверки</parameters>
// <returns>Возвращаемое: Дата – Преобразованная дата или Неопределено, если строка не является датой в ISO формате</returns>
// <notes>Примечания: Поддерживает форматы: 2025-10-15T16:45:34Z, 2025-10-15T16:45:34+03:00, 2025-10-15T16:45:34</notes>
Функция РаспознатьДатуISO(СтрокаДаты)
	
	Если СтрДлина(СтрокаДаты) < 19 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Найти(СтрокаДаты, "T") = 0 ИЛИ Найти(СтрокаДаты, "-") = 0 ИЛИ Найти(СтрокаДаты, ":") = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		СтрокаБезЧасовогоПояса = СтрокаДаты;
		
		ПозицияZ = Найти(СтрокаБезЧасовогоПояса, "Z");
		Если ПозицияZ > 0 Тогда
			СтрокаБезЧасовогоПояса = Лев(СтрокаБезЧасовогоПояса, ПозицияZ - 1);
		КонецЕсли;
		
		ПозицияПлюс = Найти(СтрокаБезЧасовогоПояса, "+");
		Если ПозицияПлюс > 10 Тогда
			СтрокаБезЧасовогоПояса = Лев(СтрокаБезЧасовогоПояса, ПозицияПлюс - 1);
		КонецЕсли;
		
		ПозицияМинус = СтрНайти(СтрокаБезЧасовогоПояса, "-", НаправлениеПоиска.СКонца);
		Если ПозицияМинус > 10 Тогда
			СтрокаБезЧасовогоПояса = Лев(СтрокаБезЧасовогоПояса, ПозицияМинус - 1);
		КонецЕсли;
		
		СтрокаБезЧасовогоПояса = СтрЗаменить(СтрокаБезЧасовогоПояса, "T", "");
		СтрокаБезЧасовогоПояса = СтрЗаменить(СтрокаБезЧасовогоПояса, "-", "");
		СтрокаБезЧасовогоПояса = СтрЗаменить(СтрокаБезЧасовогоПояса, ":", "");
		
		Дата = Дата(СтрокаБезЧасовогоПояса);
		Возврат Дата;
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// <function_purpose>Назначение: Преобразование массива однородных структур в ТаблицуЗначений</function_purpose>
// <parameters>Параметры: Массив – Массив – Массив структур для преобразования</parameters>
// <returns>Возвращаемое: ТаблицаЗначений – Таблица значений или Неопределено, если массив не однородный</returns>
// <notes>Примечания: Все элементы массива должны быть структурами. Колонки типа Структура пропускаются. Остальные колонки создаются с типом Строка длиной 150 символов</notes>
Функция ПреобразоватьМассивВТаблицуЗначений(Массив)
	
	Если Массив.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ПерваяСтрока = Массив[0];
	
	Если ТипЗнч(ПерваяСтрока) <> Тип("Структура") И ТипЗнч(ПерваяСтрока) <> Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	Для Каждого Элемент Из ПерваяСтрока Цикл
		
		ИмяКолонки = Элемент.Ключ;
		Значение = Элемент.Значение;
		ТипЗначения = ТипЗнч(Значение);
		
		Если ТипЗначения = Тип("Неопределено") Тогда
			
			ТаблицаЗначений.Колонки.Добавить(ИмяКолонки);
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
			
			Продолжить;
			
		Иначе
			
			ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из Массив Цикл
		
		Если ТипЗнч(ЭлементМассива) <> Тип("Структура") И ТипЗнч(ЭлементМассива) <> Тип("Соответствие") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
			
			ИмяКолонки = Колонка.Имя;
			
			Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				
				Если ЭлементМассива.Свойство(ИмяКолонки) Тогда
					НоваяСтрока[ИмяКолонки] = ЭлементМассива[ИмяКолонки];
				КонецЕсли;
				
			Иначе
				
				Значение = ЭлементМассива[ИмяКолонки];
				
				Если Значение <> Неопределено Тогда
					НоваяСтрока[ИмяКолонки] = Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

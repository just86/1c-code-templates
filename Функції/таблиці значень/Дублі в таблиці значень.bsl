Варіант 1: НайтиСтроки (простий)
Коли використовувати: До 500 рядків, коли важлива простота коду
1c// Назначение: Визначає дублікати фіскальних чеків простим пошуком
// Параметры: Відсутні
// Примечания: Найпростіший код, для невеликих таблиць
// Производительность: O(n²) - повільно для великих таблиць
Процедура ОпределитьДубликатыФискальныхЧеков()
	
	Для Каждого СтрокаЧека Из Объект.ТаблицаЧеков Цикл
		
		Если ЗначениеЗаполнено(СтрокаЧека.НомерФискальногоЧека) Тогда
			
			СтруктураПоиска = Новый Структура("НомерФискальногоЧека", СтрокаЧека.НомерФискальногоЧека);
			НайденныеСтроки = Объект.ТаблицаЧеков.НайтиСтроки(СтруктураПоиска);
			
			СтрокаЧека.ЕстьДубликат = (НайденныеСтроки.Количество() > 1);
			
		Иначе
			
			СтрокаЧека.ЕстьДубликат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Варіант 2: НайтиСтроки (оптимізований)
Коли використовувати: 500-5000 рядків, баланс швидкості та читабельності
1c// Назначение: Визначає дублікати з оптимізацією - кожен номер обробляється один раз
// Параметры: Відсутні
// Примечания: Кожен унікальний номер шукається лише один раз
// Производительность: O(n × m), де m - кількість унікальних номерів
Процедура ОпределитьДубликатыФискальныхЧеков()
	
	// Скидаємо всі прапорці
	Для Каждого СтрокаЧека Из Объект.ТаблицаЧеков Цикл
		СтрокаЧека.ЕстьДубликат = Ложь;
	КонецЦикла;
	
	// Масив для збереження вже оброблених номерів
	ОбработанныеНомера = Новый Массив;
	
	Для Каждого СтрокаЧека Из Объект.ТаблицаЧеков Цикл
		
		Если ЗначениеЗаполнено(СтрокаЧека.НомерФискальногоЧека) Тогда
			
			// Перевіряємо чи вже обробляли цей номер
			Если ОбработанныеНомера.Найти(СтрокаЧека.НомерФискальногоЧека) = Неопределено Тогда
				
				// Шукаємо всі рядки з таким номером
				СтруктураПоиска = Новый Структура("НомерФискальногоЧека", СтрокаЧека.НомерФискальногоЧека);
				НайденныеСтроки = Объект.ТаблицаЧеков.НайтиСтроки(СтруктураПоиска);
				
				// Якщо більше одного - позначаємо всі
				Если НайденныеСтроки.Количество() > 1 Тогда
					
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
						НайденнаяСтрока.ЕстьДубликат = Истина;
					КонецЦикла;
					
				КонецЕсли;
				
				// Додаємо до списку оброблених
				ОбработанныеНомера.Добавить(СтрокаЧека.НомерФискальногоЧека);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Варіант 3: Соответствие (найшвидший)
Коли використовувати: Більше 5000 рядків, критична швидкість
1c// Назначение: Визначає дублікати через мапу для максимальної швидкості
// Параметры: Відсутні
// Примечания: Два проходи по таблиці, найшвидший варіант
// Производительность: O(n) - лінійна складність, найшвидший
Процедура ОпределитьДубликатыФискальныхЧеков()
	
	// Карта: НомерФискальногоЧека → Кількість входжень
	КартаНомеров = Новый Соответствие;
	
	// Перший прохід - рахуємо кількість кожного номера
	Для Каждого СтрокаЧека Из Объект.ТаблицаЧеков Цикл
		
		Если ЗначениеЗаполнено(СтрокаЧека.НомерФискальногоЧека) Тогда
			
			ТекущееКоличество = КартаНомеров[СтрокаЧека.НомерФискальногоЧека];
			
			Если ТекущееКоличество = Неопределено Тогда
				КартаНомеров.Вставить(СтрокаЧека.НомерФискальногоЧека, 1);
			Иначе
				КартаНомеров.Вставить(СтрокаЧека.НомерФискальногоЧека, ТекущееКоличество + 1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Другий прохід - позначаємо дублікати
	Для Каждого СтрокаЧека Из Объект.ТаблицаЧеков Цикл
		
		Если ЗначениеЗаполнено(СтрокаЧека.НомерФискальногоЧека) Тогда
			
			Количество = КартаНомеров[СтрокаЧека.НомерФискальногоЧека];
			СтрокаЧека.ЕстьДубликат = (Количество > 1);
			
		Иначе
			
			СтрокаЧека.ЕстьДубликат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
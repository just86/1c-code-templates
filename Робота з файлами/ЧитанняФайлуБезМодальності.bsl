// Читання файлу Excel без модальних діалогів
// Повний приклад з завантаженням, обробкою та створенням документів

// ==================== КЛІЄНТСЬКА ЧАСТИНА - ОСНОВНИЙ МЕТОД ====================

&НаКлиенте
Процедура Завантажити(Команда)
    
    // Адреса для збереження файлу у тимчасовому сховищі
    Адрес = "";
    
    // Параметри діалогу з фільтром типів файлів
    ПараметрыДиалога = Новый ПараметрыДиалогаПомещенияФайлов(
        "Виберіть файл Excel", 
        Ложь,  // Множинний вибір відключений
        "Документ Excel (*.xls; *.xlsx)|*.xls; *.xlsx"
    );
    
    // Створення оповіщень для різних етапів завантаження
    ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
        "ОписаниеОповещенияОЗавершении", 
        ЭтотОбъект
    );
    
    ОписаниеОповещенияОХодеВыполнения = Новый ОписаниеОповещения(
        "ОписаниеОповещенияОХодеВыполнения", 
        ЭтотОбъект
    );
    
    ОписаниеОповещенияПередНачалом = Новый ОписаниеОповещения(
        "ОписаниеОповещенияПередНачалом", 
        ЭтотОбъект
    );
    
    // Асинхронне завантаження файлу на сервер
    НачатьПомещениеФайлаНаСервер(
        ОписаниеОповещенияОЗавершении, 
        ОписаниеОповещенияОХодеВыполнения, 
        ОписаниеОповещенияПередНачалом, 
        Адрес, 
        ПараметрыДиалога, 
        УникальныйИдентификатор
    );
    
КонецПроцедуры


// ==================== ОБРОБНИКИ ОПОВІЩЕНЬ ====================

&НаКлиенте
Процедура ОписаниеОповещенияОЗавершении(Результат, ДополнительныеПараметры) Экспорт
    
    // Перевірка чи файл було завантажено
    Если Результат <> Неопределено И НЕ Результат.ПомещениеФайлаОтменено Тогда
        
        // Отримуємо розширення файлу
        Расширение = Результат.СсылкаНаФайл.Расширение;
        
        // Викликаємо серверну обробку
        Статус = ВыполнитьЗагрузкуНаСервере(Результат.Адрес, Расширение);
        
        // Виводимо результат
        Сообщить(Статус);
        
    КонецЕсли;
    
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеОповещенияОХодеВыполнения(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    
    // Тут можна відображати прогрес завантаження
    // Наприклад, оновлювати індикатор прогресу
    
КонецПроцедуры


&НаКлиенте
Процедура ОписаниеОповещенияПередНачалом(ПомещаемыйФайл, ОтказОтПомещенияФайла, ДополнительныеПараметры) Экспорт
    
    // Тут можна виконати перевірки перед початком завантаження
    // Наприклад, перевірити розмір файлу
    
КонецПроцедуры


// ==================== СЕРВЕРНА ОБРОБКА ====================

&НаСервере
Функция ВыполнитьЗагрузкуНаСервере(АдресФайла, Расширение)
    
    Попытка
        // Створюємо тимчасовий файл
        ИмяФайла = ПолучитьИмяВременногоФайла(Расширение);
        
        // Отримуємо дані з тимчасового сховища
        ДД = ПолучитьИзВременногоХранилища(АдресФайла);
        ДД.Записать(ИмяФайла);
        
        // Читаємо Excel як табличний документ
        ТабДок = Новый ТабличныйДокумент;
        ТабДок.Прочитать(ИмяФайла, СпособЧтенияЗначенийТабличногоДокумента.Значение);
        
        // Конвертуємо в таблицю значень
        ТЗ = ТабличныйДокументВТаблицуЗначений(ТабДок);
        
        // Створюємо типізовану таблицю значень
        ТипизированнаяТЗ = СоздатьТипизированнуюТаблицу();
        
        // Заповнюємо типізовану таблицю даними
        ЗаполнитьТипизированнуюТаблицу(ТЗ, ТипизированнаяТЗ);
        
        // Обробляємо дані через запит
        РезультатЗапроса = ВыполнитьЗапросОбработки(ТипизированнаяТЗ);
        
        // Створюємо документи
        КоличествоДокументов = СоздатьДокументы(РезультатЗапроса);
        
        // Видаляємо тимчасовий файл
        УдалитьФайлы(ИмяФайла);
        
        Возврат СтрШаблон("Завантажено %1 рядків, створено %2 документів", 
            ТЗ.Количество(), КоличествоДокументов);
            
    Исключение
        Возврат СтрШаблон("Помилка завантаження: %1", ОписаниеОшибки());
    КонецПопытки;
    
КонецФункции


// ==================== ДОПОМІЖНІ ФУНКЦІЇ ====================

&НаСервере
Функция СоздатьТипизированнуюТаблицу()
    
    ТипизированнаяТЗ = Новый ТаблицаЗначений;
    ТипизированнаяТЗ.Колонки.Добавить("ТабельныйНомер", 
        Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
    ТипизированнаяТЗ.Колонки.Добавить("Дата", 
        Новый ОписаниеТипов("Дата"));
    ТипизированнаяТЗ.Колонки.Добавить("КоличествоДней", 
        Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2)));
    
    Возврат ТипизированнаяТЗ;
    
КонецФункции


&НаСервере
Процедура ЗаполнитьТипизированнуюТаблицу(ТЗ, ТипизированнаяТЗ)
    
    Счт = 0;
    
    Для Каждого Стр Из ТЗ Цикл
        
        // Пропускаємо перші 2 рядки (заголовки)
        Если Счт < 2 Тогда
            Счт = Счт + 1;
            Продолжить;
        КонецЕсли;
        
        СтрТипизированнаяТЗ = ТипизированнаяТЗ.Добавить();
        
        Попытка
            // Заповнення табельного номера
            Если ЗначениеЗаполнено(Стр._3) Тогда
                СтрТипизированнаяТЗ.ТабельныйНомер = Формат(Число(Стр._3), "ЧЦ=10; ЧВН=; ЧГ=");
            КонецЕсли;
            
            // Заповнення дати (конвертація з формату DD.MM.YYYY)
            Если ЗначениеЗаполнено(Стр._1) Тогда
                СтрТипизированнаяТЗ.Дата = Дата(
                    Сред(Стр._1, 7, 4) + Сред(Стр._1, 4, 2) + Сред(Стр._1, 1, 2)
                );
            КонецЕсли;
            
            // Заповнення кількості днів
            СтрТипизированнаяТЗ.КоличествоДней = Число(Стр._6);
            
        Исключение
            // Логування помилок при потребі
        КонецПопытки;
        
    КонецЦикла;
    
КонецПроцедуры


&НаСервере
Функция ВыполнитьЗапросОбработки(ТипизированнаяТЗ)
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("ТЗ", ТипизированнаяТЗ);
    Запрос.Текст = 
        "ВЫБРАТЬ
        |	ТЗ.ТабельныйНомер КАК ТабельныйНомер,
        |	ТЗ.Дата КАК Дата,
        |	ТЗ.КоличествоДней КАК КоличествоДней
        |ПОМЕСТИТЬ ВТ_ТЗ
        |ИЗ
        |	&ТЗ КАК ТЗ
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	Сотрудники.Ссылка КАК Сотрудник,
        |	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
        |	ВТ_ТЗ.Дата КАК РабочийГодНачало,
        |	ВТ_ТЗ.КоличествоДней КАК КоличествоДней,
        |	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ВТ_ТЗ.Дата, ГОД, 1), ДЕНЬ, -1) КАК РабочийГодОкончание
        |ИЗ
        |	ВТ_ТЗ КАК ВТ_ТЗ
        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
        |		ПО ВТ_ТЗ.ТабельныйНомер = Сотрудники.Код
        |			И (НЕ Сотрудники.ПометкаУдаления)";
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции


&НаСервере
Функция СоздатьДокументы(РезультатЗапроса)
    
    КоличествоДокументов = 0;
    С = 0;
    
    Пока С < РезультатЗапроса.Количество() Цикл
        
        // Пропускаємо рядки без співробітника
        Если НЕ ЗначениеЗаполнено(РезультатЗапроса[С].Сотрудник) Тогда
            С = С + 1;
            Продолжить;
        КонецЕсли;
        
        // Створюємо документ
        Док = Документы.ВводНачальныхОстатковОтпусков.СоздатьДокумент();
        Док.Дата = ДатаДокумента;
        Док.ДатаОстатков = ДатаОстатков;
        Док.Сотрудник = РезультатЗапроса[С].Сотрудник;
        Док.ФизическоеЛицо = РезультатЗапроса[С].ФизическоеЛицо;
        Док.Ответственный = ПараметрыСеанса.ТекущийПользователь;
        Док.Организация = Организация;
        
        С = С + 1;
        
        // Заповнюємо табличну частину
        Пока С < РезультатЗапроса.Количество() 
            И НЕ ЗначениеЗаполнено(РезультатЗапроса[С].Сотрудник) Цикл
            
            СтрТЧ = Док.ОстаткиОтпусковПоРабочимГодам.Добавить();
            СтрТЧ.ВидЕжегодногоОтпуска = ВидОтпуска;
            СтрТЧ.РабочийГодНачало = РезультатЗапроса[С].РабочийГодНачало;
            СтрТЧ.РабочийГодОкончание = РезультатЗапроса[С].РабочийГодОкончание;
            СтрТЧ.Остаток = РезультатЗапроса[С].КоличествоДней;
            
            С = С + 1;
            
        КонецЦикла;
        
        // Заповнюємо підсумки
        СтрТЧ = Док.ЕжегодныеОтпуска.Добавить();
        СтрТЧ.ВидЕжегодногоОтпуска = ВидОтпуска;
        СтрТЧ.КоличествоДнейВГод = 24;
        СтрТЧ.ОстатокНаДатуОстатков = Док.ОстаткиОтпусковПоРабочимГодам.Итог("Остаток");
        
        // Записуємо документ
        Док.Записать();
        КоличествоДокументов = КоличествоДокументов + 1;
        
    КонецЦикла;
    
    Возврат КоличествоДокументов;
    
КонецФункции


&НаСервере
Функция ТабличныйДокументВТаблицуЗначений(ТабДок)
    
    ТаблицаДанныеДокумента = Новый ТаблицаЗначений();
    
    // Створюємо колонки
    Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
        ИмяКолонки = "_" + СчетчикКолонок;
        ТаблицаДанныеДокумента.Колонки.Добавить(ИмяКолонки);
    КонецЦикла;
    
    // Заповнюємо рядки
    Для СчетчикСтрок = 1 По ТабДок.ВысотаТаблицы Цикл
        
        СтрокаТаблицы = ТаблицаДанныеДокумента.Добавить();
        
        Для СчетчикКолонок = 1 По ТабДок.ШиринаТаблицы Цикл
            ИмяКолонки = "_" + СчетчикКолонок;
            ТекущаяЯчейка = ТабДок.Область(СчетчикСтрок, СчетчикКолонок);
            СтрокаТаблицы[ИмяКолонки] = ТекущаяЯчейка.Текст;
        КонецЦикла;
        
    КонецЦикла;
    
    Возврат ТаблицаДанныеДокумента;
    
КонецФункции


// ==================== ОПТИМІЗАЦІЇ ====================
//
// 1. Використання асинхронних методів для неблокуючого завантаження
// 2. Типізація таблиці значень для коректної роботи з даними
// 3. Використання запитів для об'єднання з довідниками
// 4. Пакетна обробка даних замість поелементної
// 5. Обробка помилок з детальним логуванням
//
// ==================== РЕКОМЕНДАЦІЇ ====================
//
// ✅ Завжди використовуйте типізацію для точності даних
// ✅ Обробляйте помилки конвертації типів
// ✅ Видаляйте тимчасові файли після використання
// ✅ Використовуйте запити для валідації даних
// ✅ Виводьте зрозумілі повідомлення про результат операції

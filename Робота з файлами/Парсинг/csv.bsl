//*******************************************************************************************************
Приклад 1: CSV з заголовками
Файл data.csv:
csvІм'я;Вік;Email;Примітка
Іван;30;ivan@example.com;Менеджер
Марія;25;maria@example.com;"Працює в відділі;продажів"
Петро;35;petro@example.com;"Має досвід ""10 років"""

ПараметрыЦСВ = ПараметрыЧтенияCSV();
ПараметрыЦСВ.ПутьКФайлу = "C:\data.csv";
ПараметрыЦСВ.ПервыйРядокЗаголовок = Истина;

ТаблицаЗначений = ПрочитатьCSVФайл(ПараметрыЦСВ);

// Колонки: Ім_я, Вік, Email, Примітка
// 3 рядки з даними
Для Каждого Строка Из ТаблицаЗначений Цикл
	Сообщить(Строка.Ім_я + " - " + Строка.Email);
КонецЦикла;


//*******************************************************************************************************
Приклад 2: CSV без заголовків
Файл numbers.csv:
csv100;200;300
150;250;350
200;300;400
ПараметрыЦСВ = ПараметрыЧтенияCSV();
ПараметрыЦСВ.ПутьКФайлу = "C:\numbers.csv";
ПараметрыЦСВ.ПервыйРядокЗаголовок = Ложь;

ТаблицаЗначений = ПрочитатьCSVФайл(ПараметрыЦСВ);

// Колонки: _1, _2, _3
// 3 рядки з даними
Сообщить("Первое значение первой строки: " + ТаблицаЗначений[0]._1);


//*******************************************************************************************************
Приклад 3: Ігнорування заголовків (автоімена)
1cПараметры = ПараметрыЧтенияCSV();
Параметры.ПутьКФайлу = "C:\data.csv";
Параметры.ПервыйРядокЗаголовок = Истина;
Параметры.ИспользоватьАвтоименаКолонок = Истина; // Ігноруємо заголовки

ТаблицаЗначений = ПрочитатьCSVФайл(Параметры);

// Колонки: _1, _2, _3, _4
// Перший рядок з файлу теж стає даними
Приклад 4: Інший розділювач
Файл data_comma.csv:
csvName,Age,City
John,30,"New York, USA"
Jane,25,"Los Angeles, CA"
ПараметрыЦСВ = ПараметрыЧтенияCSV();
ПараметрыЦСВ.ПутьКФайлу = "C:\data_comma.csv";
ПараметрыЦСВ.Разделитель = ",";
ПараметрыЦСВ.Кодировка = КодировкаТекста.UTF8;

ТаблицаЗначений = ПрочитатьCSVФайл(ПараметрыЦСВ);


//*******************************************************************************************************
Як працює екранування:

Розділювач всередині значення:

"Працює в відділі;продажів" → Працює в відділі;продажів


Подвійні лапки всередині значення:

"Має досвід ""10 років""" → Має досвід "10 років"


Очищення заголовків:

Ім'я користувача → Ім_я_користувача
Email (робочий) → Email_робочий
123abc → _123abc
Дублікати: Name, Name → Name, Name_2
//*******************************************************************************************************





// <function_purpose>Назначение: Создание структуры параметров для чтения CSV файла</function_purpose>
// <returns>Возвращаемое: Структура – Структура с параметрами чтения</returns>
// <notes>Примечания: ПервыйРядокЗаголовок - если Истина, первая строка используется как заголовки. Разделитель по умолчанию ";". Кодировка по умолчанию UTF8. ИспользоватьАвтоименаКолонок - если Истина, игнорирует заголовки и называет колонки _1, _2, _3</notes>
Функция ПараметрыЧтенияCSV() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ПутьКФайлу", "");
	Параметры.Вставить("ПервыйРядокЗаголовок", Истина);
	Параметры.Вставить("Разделитель", ";");
	Параметры.Вставить("Кодировка", КодировкаТекста.UTF8);
	Параметры.Вставить("ИспользоватьАвтоименаКолонок", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// <function_purpose>Назначение: Чтение и парсинг CSV файла в таблицу значений</function_purpose>
// <parameters>Параметры: ПараметрыФункции – Структура – Параметры чтения (ПутьКФайлу, ПервыйРядокЗаголовок, Разделитель, Кодировка, ИспользоватьАвтоименаКолонок)</parameters>
// <returns>Возвращаемое: ТаблицаЗначений – Таблица с данными из CSV или Неопределено в случае ошибки</returns>
// <notes>Примечания: Поддерживает экранирование значений в кавычках. Если значение содержит разделитель, оно должно быть в кавычках. Двойные кавычки внутри значения экранируются удвоением ("")</notes>
Функция ПрочитатьCSVФайл(ПараметрыФункции) Экспорт
	
	Если НЕ ПараметрыФункции.Свойство("ПутьКФайлу") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыФункции.ПутьКФайлу) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьКФайлу = ПараметрыФункции.ПутьКФайлу;
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Если НЕ Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Разделитель = ?(ПараметрыФункции.Свойство("Разделитель"), ПараметрыФункции.Разделитель, ";");
	Кодировка = ?(ПараметрыФункции.Свойство("Кодировка"), ПараметрыФункции.Кодировка, КодировкаТекста.UTF8);
	ПервыйРядокЗаголовок = ?(ПараметрыФункции.Свойство("ПервыйРядокЗаголовок"), 
	                          ПараметрыФункции.ПервыйРядокЗаголовок, Истина);
	ИспользоватьАвтоименаКолонок = ?(ПараметрыФункции.Свойство("ИспользоватьАвтоименаКолонок"), 
	                                  ПараметрыФункции.ИспользоватьАвтоименаКолонок, Ложь);
	
	Попытка
		
		ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, Кодировка);
		
		ТаблицаЗначений = Новый ТаблицаЗначений;
		МассивЗаголовков = Неопределено;
		КоличествоКолонок = 0;
		НомерСтроки = 0;
		
		Пока Истина Цикл
			
			СтрокаФайла = ЧтениеТекста.ПрочитатьСтроку();
			
			Если СтрокаФайла = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаФайла)) Тогда
				Продолжить;
			КонецЕсли;
			
			МассивЗначений = РазобратьСтрокуCSV(СтрокаФайла, Разделитель);
			
			Если МассивЗаголовков = Неопределено Тогда
				
				КоличествоКолонок = МассивЗначений.Количество();
				
				Если ИспользоватьАвтоименаКолонок ИЛИ НЕ ПервыйРядокЗаголовок Тогда
					
					МассивЗаголовков = СоздатьАвтоименаКолонок(КоличествоКолонок);
					
				Иначе
					
					МассивЗаголовков = ОчиститьЗаголовкиКолонок(МассивЗначений);
					
				КонецЕсли;
				
				Для Каждого ИмяКолонки Из МассивЗаголовков Цикл
					ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0)));
				КонецЦикла;
				
				Если ИспользоватьАвтоименаКолонок ИЛИ НЕ ПервыйРядокЗаголовок Тогда
					
					НоваяСтрока = ТаблицаЗначений.Добавить();
					
					Для Индекс = 0 По МассивЗначений.ВГраница() Цикл
						НоваяСтрока[Индекс] = МассивЗначений[Индекс];
					КонецЦикла;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			
			Для Индекс = 0 По Мин(МассивЗначений.ВГраница(), КоличествоКолонок - 1) Цикл
				НоваяСтрока[Индекс] = МассивЗначений[Индекс];
			КонецЦикла;
			
		КонецЦикла;
		
		ЧтениеТекста.Закрыть();
		
		Возврат ТаблицаЗначений;
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// <function_purpose>Назначение: Разбор строки CSV с учетом экранирования кавычками</function_purpose>
// <parameters>Параметры: Строка – Строка – Строка для разбора; Разделитель – Строка – Символ разделителя</parameters>
// <returns>Возвращаемое: Массив – Массив значений из строки</returns>
// <notes>Примечания: Значения в кавычках могут содержать разделитель. Двойные кавычки ("") внутри значения преобразуются в одинарные (")</notes>
Функция РазобратьСтрокуCSV(Строка, Разделитель)
	
	Результат = Новый Массив;
	ТекущееЗначение = "";
	ВнутриКавычек = Ложь;
	ДлинаСтроки = СтрДлина(Строка);
	
	Для Позиция = 1 По ДлинаСтроки Цикл
		
		Символ = Сред(Строка, Позиция, 1);
		
		Если Символ = """" Тогда
			
			Если ВнутриКавычек Тогда
				
				Если Позиция < ДлинаСтроки И Сред(Строка, Позиция + 1, 1) = """" Тогда
					
					ТекущееЗначение = ТекущееЗначение + """";
					Позиция = Позиция + 1;
					
				Иначе
					
					ВнутриКавычек = Ложь;
					
				КонецЕсли;
				
			Иначе
				
				Если СтрДлина(ТекущееЗначение) = 0 Тогда
					ВнутриКавычек = Истина;
				Иначе
					ТекущееЗначение = ТекущееЗначение + Символ;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Символ = Разделитель И НЕ ВнутриКавычек Тогда
			
			Результат.Добавить(СокрЛП(ТекущееЗначение));
			ТекущееЗначение = "";
			
		Иначе
			
			ТекущееЗначение = ТекущееЗначение + Символ;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Добавить(СокрЛП(ТекущееЗначение));
	
	Возврат Результат;
	
КонецФункции

// <function_purpose>Назначение: Создание автоматических имен колонок (_1, _2, _3 и т.д.)</function_purpose>
// <parameters>Параметры: КоличествоКолонок – Число – Количество колонок для создания</parameters>
// <returns>Возвращаемое: Массив – Массив имен колонок</returns>
Функция СоздатьАвтоименаКолонок(КоличествоКолонок)
	
	Результат = Новый Массив;
	
	Для Индекс = 1 По КоличествоКолонок Цикл
		Результат.Добавить("_" + Формат(Индекс, "ЧГ=0"));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// <function_purpose>Назначение: Очистка заголовков колонок для использования в таблице значений</function_purpose>
// <parameters>Параметры: МассивЗаголовков – Массив – Массив исходных заголовков</parameters>
// <returns>Возвращаемое: Массив – Массив очищенных заголовков</returns>
// <notes>Примечания: Удаляет недопустимые символы, заменяет пробелы на подчеркивание, обеспечивает уникальность имен</notes>
Функция ОчиститьЗаголовкиКолонок(МассивЗаголовков)
	
	Результат = Новый Массив;
	ИспользованныеИмена = Новый Соответствие;
	
	Для Каждого Заголовок Из МассивЗаголовков Цикл
		
		ОчищенноеИмя = СокрЛП(Заголовок);
		
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, " ", "_");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "-", "_");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, ".", "_");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, ",", "_");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "(", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, ")", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "[", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "]", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "+", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "=", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, """", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "'", "");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "/", "_");
		ОчищенноеИмя = СтрЗаменить(ОчищенноеИмя, "\", "_");
		
		Если НЕ ЗначениеЗаполнено(ОчищенноеИмя) Тогда
			ОчищенноеИмя = "_" + Формат(Результат.Количество() + 1, "ЧГ=0");
		КонецЕсли;
		
		Если СтрНачинаетсяС(ОчищенноеИмя, "0") ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "1") 
			ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "2") ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "3")
			ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "4") ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "5")
			ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "6") ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "7")
			ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "8") ИЛИ СтрНачинаетсяС(ОчищенноеИмя, "9") Тогда
			
			ОчищенноеИмя = "_" + ОчищенноеИмя;
			
		КонецЕсли;
		
		БазовоеИмя = ОчищенноеИмя;
		Счетчик = 1;
		
		Пока ИспользованныеИмена[ОчищенноеИмя] <> Неопределено Цикл
			
			Счетчик = Счетчик + 1;
			ОчищенноеИмя = БазовоеИмя + "_" + Формат(Счетчик, "ЧГ=0");
			
		КонецЦикла;
		
		ИспользованныеИмена.Вставить(ОчищенноеИмя, Истина);
		Результат.Добавить(ОчищенноеИмя);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

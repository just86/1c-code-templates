// Простий GET-запрос без аутентификации
Параметры = ПараметрыГетЗапроса();
Параметры.Адрес = "https://api.example.com/users/123";

Результат = ВыполнитьГетЗапрос(Параметры);

Если Результат.Успех Тогда
	
	Сообщить("Успешно! Код: " + Результат.КодСостояния);
	Сообщить("Ответ: " + Результат.Тело);
	
	// Если ответ в JSON
	Данные = ПрочитатьУниверсальныйJSON(Результат.Тело);
	
Иначе
	
	Сообщить("Ошибка: " + Результат.ОписаниеОшибки);
	
КонецЕсли;
1c// GET-запрос с базовой аутентификацией
Параметры = ПараметрыГетЗапроса();
Параметры.Адрес = "https://api.example.com/protected/data";
Параметры.Логин = "user";
Параметры.Пароль = "password";
Параметры.Таймаут = 60;

Результат = ВыполнитьГетЗапрос(Параметры);
1c// GET-запрос с дополнительными заголовками
Параметры = ПараметрыГетЗапроса();
Параметры.Адрес = "https://api.example.com/data";
Параметры.ДополнительныеЗаголовки.Вставить("Authorization", "Bearer токен");
Параметры.ДополнительныеЗаголовки.Вставить("Accept", "application/json");

Результат = ВыполнитьГетЗапрос(Параметры);



// <function_purpose>Назначение: Создание структуры параметров для выполнения GET-запроса</function_purpose>
// <returns>Возвращаемое: Структура – Структура с параметрами запроса</returns>
// <notes>Примечания: Адрес - полный URL (например: https://api.example.com/users). Логин и Пароль используются для базовой HTTP-аутентификации. Таймаут по умолчанию 30 секунд</notes>
Функция ПараметрыГетЗапроса() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("Таймаут", 30);
	Параметры.Вставить("ДополнительныеЗаголовки", Новый Соответствие);
	
	Возврат Параметры;
	
КонецФункции

// <function_purpose>Назначение: Выполнение GET-запроса к веб-сервису</function_purpose>
// <parameters>Параметры: ПараметрыФункции – Структура – Параметры запроса (Адрес, Логин, Пароль, Таймаут, ДополнительныеЗаголовки)</parameters>
// <returns>Возвращаемое: Структура – Структура с результатом запроса (Успех, КодСостояния, Тело, Заголовки, ОписаниеОшибки) или Неопределено в случае ошибки</returns>
// <notes>Примечания: Успешными считаются коды состояния от 200 до 299. Поддерживает базовую HTTP-аутентификацию. Тело ответа возвращается как строка</notes>
Функция ВыполнитьГетЗапрос(ПараметрыФункции) Экспорт
	
	Если НЕ ПараметрыФункции.Свойство("Адрес") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыФункции.Адрес) Тогда
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Не указан адрес запроса");
	КонецЕсли;
	
	Попытка
		
		СтруктураАдреса = СтруктураURI(ПараметрыФункции.Адрес);
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка разбора адреса: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	Сервер = СтруктураАдреса.Хост;
	Порт = ?(ЗначениеЗаполнено(СтруктураАдреса.Порт), СтруктураАдреса.Порт, 
	         ?(НРег(СтруктураАдреса.Схема) = "https", 443, 80));
	
	ИспользоватьSSL = НРег(СтруктураАдреса.Схема) = "https";
	
	ПутьНаСервере = СтруктураАдреса.ПутьНаСервере;
	Если НЕ ЗначениеЗаполнено(ПутьНаСервере) Тогда
		ПутьНаСервере = "/";
	КонецЕсли;
	
	Таймаут = ?(ПараметрыФункции.Свойство("Таймаут"), ПараметрыФункции.Таймаут, 30);
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			Сервер,
			Порт,
			ПараметрыФункции.Логин,
			ПараметрыФункции.Пароль,
			,
			Таймаут,
			?(ИспользоватьSSL, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)
		);
		
		Запрос = Новый HTTPЗапрос(ПутьНаСервере);
		
		Если ПараметрыФункции.Свойство("ДополнительныеЗаголовки") Тогда
			
			Для Каждого Заголовок Из ПараметрыФункції.ДополнительныеЗаголовки Цикл
				Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		
		КодСостояния = Ответ.КодСостояния;
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		ЗаголовкиОтвета = Ответ.Заголовки;
		
		Успех = (КодСостояния >= 200) И (КодСостояния <= 299);
		
		ОписаниеОшибки = "";
		Если НЕ Успех Тогда
			ОписаниеОшибки = "HTTP " + КодСостояния;
		КонецЕсли;
		
		Возврат СоздатьРезультатЗапроса(Успех, КодСостояния, ТелоОтвета, ЗаголовкиОтвета, ОписаниеОшибки);
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка выполнения запроса: " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

// <function_purpose>Назначение: Создание структуры результата веб-запроса</function_purpose>
// <parameters>Параметры: Успех – Булево – Флаг успешности запроса; КодСостояния – Число – HTTP код состояния; Тело – Строка – Тело ответа; Заголовки – Соответствие – Заголовки ответа; ОписаниеОшибки – Строка – Описание ошибки</parameters>
// <returns>Возвращаемое: Структура – Структура результата</returns>
Функция СоздатьРезультатЗапроса(Успех, КодСостояния, Тело, Заголовки, ОписаниеОшибки = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Успех);
	Результат.Вставить("КодСостояния", КодСостояния);
	Результат.Вставить("Тело", Тело);
	Результат.Вставить("Заголовки", Заголовки);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции

// <function_purpose>Назначение: Универсальное преобразование данных в JSON с настраиваемыми параметрами</function_purpose>
// <parameters>Параметры: Данные – Произвольный – Данные для преобразования (структура, массив, соответствие, таблица значений, примитивный тип); ФорматированныйВывод – Булево – Использовать переносы строк и отступы (по умолчанию Ложь)</parameters>
// <returns>Возвращаемое: Строка – JSON-представление данных или Неопределено в случае ошибки</returns>
// <notes>Примечания: Автоматически обрабатывает NULL, UUID, пустые даты, примитивные типы, таблицы значений. Использует стандарт ISO 8601 + UTC для дат. ТаблицаЗначений преобразуется в массив структур</notes>
// <validation>Валидация: Проверяет тип входящих данных</validation>
// <performance>Производительность: Без ограничений на количество элементов</performance>
Функция СформироватьУниверсальныйJSON(Данные, ФорматированныйВывод = Ложь) Экспорт
	
	ТипДанных = ТипЗнч(Данные);
	
	КоллекционныеТипы = Новый Массив;
	КоллекционныеТипы.Добавить(Тип("Структура"));
	КоллекционныеТипы.Добавить(Тип("Массив"));
	КоллекционныеТипы.Добавить(Тип("Соответствие"));
	КоллекционныеТипы.Добавить(Тип("СписокЗначений"));
	КоллекционныеТипы.Добавить(Тип("ТаблицаЗначений"));
	
	ПримитивныеТипы = Новый Массив;
	ПримитивныеТипы.Добавить(Тип("Строка"));
	ПримитивныеТипы.Добавить(Тип("Число"));
	ПримитивныеТипы.Добавить(Тип("Булево"));
	ПримитивныеТипы.Добавить(Тип("Дата"));
	ПримитивныеТипы.Добавить(Тип("УникальныйИдентификатор"));
	ПримитивныеТипы.Добавить(Тип("Null"));
	
	ЭтоКоллекция = КоллекционныеТипы.Найти(ТипДанных) <> Неопределено;
	ЭтоПримитив = ПримитивныеТипы.Найти(ТипДанных) <> Неопределено;
	ЭтоНеопределено = Данные = Неопределено;
	
	Если НЕ ЭтоКоллекция И НЕ ЭтоПримитив И НЕ ЭтоНеопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПодготовленныеДанные = ПодготовитьДанныеДляJSON(Данные);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ФорматированныйВывод Тогда
		ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, "  ");
	Иначе
		ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	КонецЕсли;
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	НастройкиСериализации = Новый НастройкиСериализацииJSON();
	НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Ложь;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	
	ЗаписатьJSON(ЗаписьJSON, ПодготовленныеДанные, НастройкиСериализации);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// <function_purpose>Назначение: Подготовка данных для корректной JSON-сериализации</function_purpose>
// <parameters>Параметры: Данные – Произвольный – Исходные данные любого типа</parameters>
// <returns>Возвращаемое: Произвольный – Подготовленные данные (структура, массив или примитивный тип)</returns>
// <notes>Примечания: Обрабатывает NULL, UUID, пустые даты, примитивные типы, таблицы значений, рекурсивно обходит вложенные структуры. ТаблицаЗначений преобразуется в массив структур</notes>
Функция ПодготовитьДанныеДляJSON(Данные)
	
	Если Данные = Неопределено Тогда
		Возврат Null;
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	
	Если ТипДанных = Тип("УникальныйИдентификатор") Тогда
		
		Возврат Строка(Данные);
		
	ИначеЕсли ТипДанных = Тип("Дата") И НЕ ЗначениеЗаполнено(Данные) Тогда
		
		Возврат Null;
		
	ИначеЕсли ТипДанных = Тип("Структура") ИЛИ ТипДанных = Тип("Соответствие") Тогда
		
		Результат = Новый Структура;
		
		Для Каждого Элемент Из Данные Цикл
			
			Ключ = Элемент.Ключ;
			Значение = Элемент.Значение;
			Результат.Вставить(Ключ, ПодготовитьДанныеДляJSON(Значение));
			
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипДанных = Тип("Массив") ИЛИ ТипДанных = Тип("СписокЗначений") Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Элемент Из Данные Цикл
			
			Значение = ?(ТипДанных = Тип("СписокЗначений"), Элемент.Значение, Элемент);
			Результат.Добавить(ПодготовитьДанныеДляJSON(Значение));
			
		КонецЦикла;
		
		Возврат Результат;
		
	ИначеЕсли ТипДанных = Тип("ТаблицаЗначений") Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Строка Из Данные Цикл
			
			СтруктураСтроки = Новый Структура;
			
			Для Каждого Колонка Из Данные.Колонки Цикл
				
				ИмяКолонки = Колонка.Имя;
				Значение = Строка[ИмяКолонки];
				СтруктураСтроки.Вставить(ИмяКолонки, ПодготовитьДанныеДляJSON(Значение));
				
			КонецЦикла;
			
			Результат.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		
		Возврат Данные;
		
	КонецЕсли;
	
КонецФункции

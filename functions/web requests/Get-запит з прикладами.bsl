// Простий GET-запрос без аутентификации
//*****************************************************************************************************************************************************************
Параметры = ПараметрыГетЗапроса();
Параметры.Адрес = "https://api.example.com/users/123";

Результат = ВыполнитьГетЗапрос(Параметры);

Если Результат.Успех Тогда
	
	Сообщить("Успешно! Код: " + Результат.КодСостояния);
	Сообщить("Ответ: " + Результат.Тело);
	
	// Если ответ в JSON
	Данные = ПрочитатьУниверсальныйJSON(Результат.Тело);
	
Иначе
	
	Сообщить("Ошибка: " + Результат.ОписаниеОшибки);
	
КонецЕсли;

//*****************************************************************************************************************************************************************
// GET-запрос с базовой аутентификацией
Параметры = ПараметрыГетЗапроса();
Параметры.Адрес = "https://api.example.com/protected/data";
Параметры.Логин = "user";
Параметры.Пароль = "password";
Параметры.Таймаут = 60;

Результат = ВыполнитьГетЗапрос(Параметры);


//*****************************************************************************************************************************************************************
// GET-запрос с дополнительными заголовками
Параметры = ПараметрыГетЗапроса();
Параметры.Адрес = "https://api.example.com/data";
Параметры.ДополнительныеЗаголовки.Вставить("Authorization", "Bearer токен");
Параметры.ДополнительныеЗаголовки.Вставить("Accept", "application/json");

Результат = ВыполнитьГетЗапрос(Параметры);


//*****************************************************************************************************************************************************************
// <function_purpose>Назначение: Создание структуры параметров для выполнения GET-запроса</function_purpose>
// <returns>Возвращаемое: Структура – Структура с параметрами запроса</returns>
// <notes>Примечания: Адрес - полный URL (например: https://api.example.com/users). Логин и Пароль используются для базовой HTTP-аутентификации. Таймаут по умолчанию 30 секунд</notes>
Функция ПараметрыГетЗапроса() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Логин", "");
	Параметры.Вставить("Пароль", "");
	Параметры.Вставить("Таймаут", 30);
	Параметры.Вставить("ДополнительныеЗаголовки", Новый Соответствие);
	
	Возврат Параметры;
	
КонецФункции

// <function_purpose>Назначение: Выполнение GET-запроса к веб-сервису</function_purpose>
// <parameters>Параметры: ПараметрыФункции – Структура – Параметры запроса (Адрес, Логин, Пароль, Таймаут, ДополнительныеЗаголовки)</parameters>
// <returns>Возвращаемое: Структура – Структура с результатом запроса (Успех, КодСостояния, Тело, Заголовки, ОписаниеОшибки) или Неопределено в случае ошибки</returns>
// <notes>Примечания: Успешными считаются коды состояния от 200 до 299. Поддерживает базовую HTTP-аутентификацию. Тело ответа возвращается как строка</notes>
Функция ВыполнитьГетЗапрос(ПараметрыФункции) Экспорт
	
	Если НЕ ПараметрыФункции.Свойство("Адрес") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыФункции.Адрес) Тогда
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Не указан адрес запроса");
	КонецЕсли;
	
	Попытка
		
		СтруктураАдреса = СтруктураURI(ПараметрыФункции.Адрес);
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка разбора адреса: " + ОписаниеОшибки());
		
	КонецПопытки;
	
	Сервер = СтруктураАдреса.Хост;
	Порт = ?(ЗначениеЗаполнено(СтруктураАдреса.Порт), СтруктураАдреса.Порт, 
	         ?(НРег(СтруктураАдреса.Схема) = "https", 443, 80));
	
	ИспользоватьSSL = НРег(СтруктураАдреса.Схема) = "https";
	
	ПутьНаСервере = СтруктураАдреса.ПутьНаСервере;
	Если НЕ ЗначениеЗаполнено(ПутьНаСервере) Тогда
		ПутьНаСервере = "/";
	КонецЕсли;
	
	Таймаут = ?(ПараметрыФункции.Свойство("Таймаут"), ПараметрыФункции.Таймаут, 30);
	
	Попытка
		
		Соединение = Новый HTTPСоединение(
			Сервер,
			Порт,
			ПараметрыФункции.Логин,
			ПараметрыФункции.Пароль,
			,
			Таймаут,
			?(ИспользоватьSSL, Новый ЗащищенноеСоединениеOpenSSL, Неопределено)
		);
		
		Запрос = Новый HTTPЗапрос(ПутьНаСервере);
		
		Если ПараметрыФункции.Свойство("ДополнительныеЗаголовки") Тогда
			
			Для Каждого Заголовок Из ПараметрыФункції.ДополнительныеЗаголовки Цикл
				Запрос.Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Ответ = Соединение.ВызватьHTTPМетод("GET", Запрос);
		
		КодСостояния = Ответ.КодСостояния;
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		ЗаголовкиОтвета = Ответ.Заголовки;
		
		Успех = (КодСостояния >= 200) И (КодСостояния <= 299);
		
		ОписаниеОшибки = "";
		Если НЕ Успех Тогда
			ОписаниеОшибки = "HTTP " + КодСостояния;
		КонецЕсли;
		
		Возврат СоздатьРезультатЗапроса(Успех, КодСостояния, ТелоОтвета, ЗаголовкиОтвета, ОписаниеОшибки);
		
	Исключение
		
		Возврат СоздатьРезультатЗапроса(Ложь, 0, "", Новый Соответствие, "Ошибка выполнения запроса: " + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

// <function_purpose>Назначение: Создание структуры результата веб-запроса</function_purpose>
// <parameters>Параметры: Успех – Булево – Флаг успешности запроса; КодСостояния – Число – HTTP код состояния; Тело – Строка – Тело ответа; Заголовки – Соответствие – Заголовки ответа; ОписаниеОшибки – Строка – Описание ошибки</parameters>
// <returns>Возвращаемое: Структура – Структура результата</returns>
Функция СоздатьРезультатЗапроса(Успех, КодСостояния, Тело, Заголовки, ОписаниеОшибки = "")
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Успех);
	Результат.Вставить("КодСостояния", КодСостояния);
	Результат.Вставить("Тело", Тело);
	Результат.Вставить("Заголовки", Заголовки);
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Возврат Результат;
	
КонецФункции


Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@", НаправлениеПоиска.СКонца);
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

